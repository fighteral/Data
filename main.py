#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.9
# In conjunction with Tcl version 8.6
#    Apr 18, 2017 11:08:14 PM
import sys
import numpy as np
import pandas as pd

import matplotlib.pyplot as pyt
import seaborn as sns

from Tkinter import *
from tkFileDialog import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import main_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    main_support.set_Tk_var()
    top = Data_Mining_Beta_Version (root)
    main_support.init(root, top)
    root.mainloop()

w = None

def create_Data_Mining_Beta_Version(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    main_support.set_Tk_var()
    top = Data_Mining_Beta_Version (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Data_Mining__Beta_Version():
    global w
    w.destroy()
    w = None




class Data_Mining_Beta_Version:
    z=["USA_Housing","csv"]
    filename="/home/fighteral/PycharmProjects/untitled/USA_Housing.csv"
    x=[]
    graph_list=["boxplot","barplot","countplot","distplot","jointplot","lmplot","clustermap","heatmap","violinplot"]
    df=None                                                                                                                                                                                                     


    def graph(self):
        #user will select m


        m = "heatmap"


        if m == "boxplot":
           sns.boxplot(X,Y,data=self.df)
           pyt.show()
        elif m=="barplot":
            sns.barplot(X,Y,data=self.df)
            pyt.show()
        elif m=="countplot":
            sns.countplot(X, data=self.df)
            pyt.show()
        elif m=="violinplot":
            sns.violinplot(X,Y,data=self.dff, palette='rainbow')
            pyt.show()
        elif m=="distplot":
            sns.distplot(self.df['X'])
            pyt.show()
        elif m=="jointplot":
            sns.jointplot(X,Y,data=self.df, kind='hex')
            pyt.show()
        elif m=="lmplpot":
            sns.lmplot(X,Y,data=self.df)
            pyt.show()
        elif m=="clustermap":
            sns.clustermap(self.df.corr())
            pyt.show()
        elif m=="heatmap":
            sns.heatmap(self.df.corr())
            pyt.show()

    def pairplot(self):
        sns.pairplot(data=self.df)
        pyt.show()
    #     isko call krlena


    def browsefunc(self):
        try:

            self.filename = askopenfilename()

            y=self.filename.split("/")
            self.z=y[len(y)-1].split(".")

        except Exception as e:
            print "provide valid file name"


    def test(self):
        self.x=[]

        try:

            if(self.z[1] == "csv"):
                self.df=pd.read_csv(self.filename)

                for g in self.df.columns:
                    self.x.append(g)




            elif (self.z[1] == "xlsx"):
                df = pd.read_excel(self.filename,sheetname=1)



            elif (self.z[1] == "sql"):
                from sqlalchemy import create_engine
                engine = create_engine('sqlite:///:memory:')
                sql_df = pd.read_sql('data', con=engine)

                print "feffnjkd"
            else:
                print "Enter the valid data"
            self.graph()
            # self.pairplot()
        except Exception as e:
            print "edfved"



    def __init__(self, top=None):

        '''This class configures and populates the toplevel window.top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        font9 = "-family Chiller -size 24 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x430+414+134")
        top.title("Data Mining - Beta Version")
        top.configure(background="#d9d9d9")



        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.03, rely=0.19, height=39, width=126)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Select your data file :-''')
        self.TLabel1.configure(width=126)

        self.Browse = ttk.Button(top)
        self.Browse.place(relx=0.77, rely=0.2, height=25, width=76)
        self.Browse.configure(takefocus="")
        self.Browse.configure(text='''Browse''')
        self.Browse.configure(cursor="hand2")
        self.Browse.configure(command=self.browsefunc)


        self.Path = ttk.Label(top)
        self.Path.place(relx=0.25, rely=0.21, height=19, width=296)
        self.Path.configure(background="#d9d9d9")
        self.Path.configure(foreground="#000000")
        self.Path.configure(relief=FLAT)
        self.Path.configure(text='''Path of your data file''')
        self.Path.configure(width=296)

        self.Explore = ttk.Button(top)
        self.Explore.place(relx=0.22, rely=0.37, height=25, width=76)
        self.Explore.configure(takefocus="")
        self.Explore.configure(text='''Explore''')
        self.Explore.configure(cursor="hand2")
        self.Explore.configure(command=self.test)

        self.Explore_analze = ttk.Button(top)
        self.Explore_analze.place(relx=0.5, rely=0.37, height=25, width=105)
        self.Explore_analze.configure(takefocus="")
        self.Explore_analze.configure(text='''Explore & Analyze''')
        self.Explore_analze.configure(cursor="hand2")

        self.Generate_report = ttk.Button(top)
        self.Generate_report.place(relx=0.37, rely=0.81, height=25, width=126)
        self.Generate_report.configure(takefocus="")
        self.Generate_report.configure(text='''Generate Report''')
        self.Generate_report.configure(width=126)
        self.Generate_report.configure(cursor="hand2")

        self.Label1 = Label(top)
        self.Label1.place(relx=0.28, rely=0.07, height=44, width=212)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Data Miner''')
        self.Label1.configure(width=212)

        self.TCombobox1 = ttk.Combobox(top)
        self.TCombobox1.place(relx=0.05, rely=0.61, relheight=0.05
                , relwidth=0.24)
        self.TCombobox1.configure(textvariable=main_support.combobox)
        self.TCombobox1.configure(takefocus="")

        self.TCombobox2 = ttk.Combobox(top)
        self.TCombobox2.place(relx=0.37, rely=0.6, relheight=0.05, relwidth=0.24)

        self.TCombobox2.configure(textvariable=main_support.combobox)
        self.TCombobox2.configure(takefocus="")

        self.TCombobox3 = ttk.Combobox(top)
        self.TCombobox3.place(relx=0.68, rely=0.6, relheight=0.05, relwidth=0.24)

        self.TCombobox3.configure(textvariable=main_support.combobox)
        self.TCombobox3.configure(takefocus="")

        self.Label2 = Label(top)
        self.Label2.place(relx=0.05, rely=0.55, height=21, width=144)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Select 1st Parameter''')
        self.Label2.configure(width=144)

        self.Label3 = Label(top)
        self.Label3.place(relx=0.38, rely=0.55, height=21, width=117)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Select 2nd Parameter''')

        self.Label4 = Label(top)
        self.Label4.place(relx=0.7, rely=0.55, height=21, width=101)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Select Graph Type''')







if __name__ == '__main__':
    vp_start_gui()


